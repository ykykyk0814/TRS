"""Full SQL Schema Migration Manual

Revision ID: 69d0b2be3d24
Revises: 
Create Date: 2025-07-09 08:56:57.419018

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision = '69d0b2be3d24'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("""
    -- 创建用户表
    CREATE TABLE users (
        id SERIAL PRIMARY KEY,
        email VARCHAR NOT NULL UNIQUE,
        hashed_password VARCHAR NOT NULL,
        is_active BOOLEAN NOT NULL DEFAULT TRUE,
        is_superuser BOOLEAN NOT NULL DEFAULT FALSE,
        is_verified BOOLEAN NOT NULL DEFAULT FALSE,
        first_name VARCHAR,
        last_name VARCHAR,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- 创建索引
    CREATE INDEX ix_users_id ON users (id);
    CREATE INDEX ix_users_email ON users (email);

    -- 创建更新时间触发器函数
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = CURRENT_TIMESTAMP;
        RETURN NEW;
    END;
    $$ language 'plpgsql';

    -- 为users表创建更新时间触发器
    CREATE TRIGGER update_users_updated_at 
        BEFORE UPDATE ON users 
        FOR EACH ROW 
        EXECUTE FUNCTION update_updated_at_column();

    -- 创建用户偏好表
    CREATE TABLE user_preferences (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        prefers_direct_flights BOOLEAN DEFAULT FALSE,
        prefers_morning_departure BOOLEAN DEFAULT FALSE,
        prefers_evening_departure BOOLEAN DEFAULT FALSE,
        prefers_window_seat BOOLEAN DEFAULT FALSE,
        prefers_aisle_seat BOOLEAN DEFAULT FALSE,
        prefers_business_class BOOLEAN DEFAULT FALSE,
        prefers_economy_class BOOLEAN DEFAULT TRUE,
        prefers_short_layovers BOOLEAN DEFAULT TRUE,
        prefers_specific_airlines BOOLEAN DEFAULT FALSE,
        price_sensitive BOOLEAN DEFAULT TRUE,
        additional_preferences JSONB DEFAULT '{}',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- 创建索引
    CREATE INDEX ix_user_preferences_id ON user_preferences (id);
    CREATE INDEX ix_user_preferences_user_id ON user_preferences (user_id);

    -- 为user_preferences表创建更新时间触发器
    CREATE TRIGGER update_user_preferences_updated_at 
        BEFORE UPDATE ON user_preferences 
        FOR EACH ROW 
        EXECUTE FUNCTION update_updated_at_column();

    -- 创建机票表
    CREATE TABLE tickets (
        id SERIAL PRIMARY KEY,
        origin VARCHAR NOT NULL,
        destination VARCHAR NOT NULL,
        airline VARCHAR,
        flight_number VARCHAR,
        price DECIMAL(10,2),
        currency VARCHAR DEFAULT 'USD',
        departure_time TIMESTAMP,
        arrival_time TIMESTAMP,
        duration INTEGER, -- 飞行时长（分钟）
        aircraft_type VARCHAR,
        booking_class VARCHAR,
        available_seats INTEGER,
        is_direct BOOLEAN DEFAULT TRUE,
        layover_count INTEGER DEFAULT 0,
        layover_duration INTEGER, -- 中转时长（分钟）
        baggage_included BOOLEAN DEFAULT FALSE,
        meal_included BOOLEAN DEFAULT FALSE,
        wifi_available BOOLEAN DEFAULT FALSE,
        source VARCHAR, -- 数据来源
        booking_url TEXT,
        last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- 创建索引
    CREATE INDEX ix_tickets_id ON tickets (id);
    CREATE INDEX ix_tickets_origin ON tickets (origin);
    CREATE INDEX ix_tickets_destination ON tickets (destination);
    CREATE INDEX ix_tickets_airline ON tickets (airline);
    CREATE INDEX ix_tickets_price ON tickets (price);
    CREATE INDEX ix_tickets_departure_time ON tickets (departure_time);
    CREATE INDEX ix_tickets_booking_class ON tickets (booking_class);

    -- 为tickets表创建更新时间触发器
    CREATE TRIGGER update_tickets_updated_at 
        BEFORE UPDATE ON tickets 
        FOR EACH ROW 
        EXECUTE FUNCTION update_updated_at_column();

    -- 创建API密钥表
    CREATE TABLE api_keys (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        key_hash VARCHAR NOT NULL UNIQUE,
        name VARCHAR NOT NULL,
        prefix VARCHAR,
        is_active BOOLEAN DEFAULT TRUE,
        rate_limit INTEGER DEFAULT 100,
        total_requests INTEGER DEFAULT 0,
        last_used_at TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- 创建索引
    CREATE INDEX ix_api_keys_id ON api_keys (id);
    CREATE INDEX ix_api_keys_user_id ON api_keys (user_id);
    CREATE INDEX ix_api_keys_key_hash ON api_keys (key_hash);
    CREATE INDEX ix_api_keys_prefix ON api_keys (prefix);

    -- 为api_keys表创建更新时间触发器
    CREATE TRIGGER update_api_keys_updated_at 
        BEFORE UPDATE ON api_keys 
        FOR EACH ROW 
        EXECUTE FUNCTION update_updated_at_column();

    -- 创建复合索引以优化查询性能
    CREATE INDEX idx_tickets_route_time ON tickets (origin, destination, departure_time);
    CREATE INDEX idx_tickets_price_class ON tickets (price, booking_class);
    CREATE INDEX idx_user_preferences_boolean_flags ON user_preferences (
        prefers_direct_flights, 
        prefers_business_class, 
        price_sensitive
    );

    -- 添加约束
    ALTER TABLE user_preferences 
    ADD CONSTRAINT unique_user_preference UNIQUE (user_id);

    -- 添加检查约束
    ALTER TABLE tickets 
    ADD CONSTRAINT check_positive_price CHECK (price >= 0);

    ALTER TABLE tickets 
    ADD CONSTRAINT check_positive_duration CHECK (duration >= 0);

    ALTER TABLE api_keys 
    ADD CONSTRAINT check_positive_rate_limit CHECK (rate_limit >= 0);

    -- 创建视图：用户完整信息
    CREATE VIEW user_complete_info AS
    SELECT 
        u.id,
        u.email,
        u.first_name,
        u.last_name,
        u.is_active,
        u.is_verified,
        u.created_at as user_created_at,
        up.prefers_direct_flights,
        up.prefers_business_class,
        up.prefers_economy_class,
        up.price_sensitive,
        up.additional_preferences
    FROM users u
    LEFT JOIN user_preferences up ON u.id = up.user_id;

    -- 创建视图：机票搜索优化
    CREATE VIEW ticket_search_view AS
    SELECT 
        id,
        origin,
        destination,
        airline,
        flight_number,
        price,
        currency,
        departure_time,
        arrival_time,
        duration,
        booking_class,
        is_direct,
        layover_count,
        baggage_included,
        meal_included,
        wifi_available,
        available_seats,
        EXTRACT(HOUR FROM departure_time) as departure_hour,
        EXTRACT(DOW FROM departure_time) as departure_day_of_week
    FROM tickets
    WHERE available_seats > 0;

    -- 创建函数：搜索机票
    CREATE OR REPLACE FUNCTION search_tickets(
        p_origin VARCHAR,
        p_destination VARCHAR,
        p_departure_date DATE DEFAULT NULL,
        p_max_price DECIMAL DEFAULT NULL,
        p_booking_class VARCHAR DEFAULT NULL,
        p_direct_only BOOLEAN DEFAULT FALSE
    )
    RETURNS TABLE (
        ticket_id INTEGER,
        origin VARCHAR,
        destination VARCHAR,
        airline VARCHAR,
        flight_number VARCHAR,
        price DECIMAL,
        departure_time TIMESTAMP,
        arrival_time TIMESTAMP,
        duration INTEGER,
        is_direct BOOLEAN,
        booking_class VARCHAR
    ) AS $$
    BEGIN
        RETURN QUERY
        SELECT 
            t.id,
            t.origin,
            t.destination,
            t.airline,
            t.flight_number,
            t.price,
            t.departure_time,
            t.arrival_time,
            t.duration,
            t.is_direct,
            t.booking_class
        FROM tickets t
        WHERE 
            t.origin = p_origin
            AND t.destination = p_destination
            AND t.available_seats > 0
            AND (p_departure_date IS NULL OR DATE(t.departure_time) = p_departure_date)
            AND (p_max_price IS NULL OR t.price <= p_max_price)
            AND (p_booking_class IS NULL OR t.booking_class = p_booking_class)
            AND (p_direct_only = FALSE OR t.is_direct = TRUE)
        ORDER BY t.price ASC, t.departure_time ASC;
    END;
    $$ LANGUAGE plpgsql;

    -- 创建函数：获取用户推荐机票
    CREATE OR REPLACE FUNCTION get_recommended_tickets(
        p_user_id INTEGER,
        p_origin VARCHAR,
        p_destination VARCHAR,
        p_limit INTEGER DEFAULT 10
    )
    RETURNS TABLE (
        ticket_id INTEGER,
        origin VARCHAR,
        destination VARCHAR,
        airline VARCHAR,
        price DECIMAL,
        departure_time TIMESTAMP,
        is_direct BOOLEAN,
        booking_class VARCHAR,
        recommendation_score DECIMAL
    ) AS $$
    DECLARE
        user_prefs RECORD;
    BEGIN
        -- 获取用户偏好
        SELECT * INTO user_prefs 
        FROM user_preferences 
        WHERE user_id = p_user_id;
        
        RETURN QUERY
        SELECT 
            t.id,
            t.origin,
            t.destination,
            t.airline,
            t.price,
            t.departure_time,
            t.is_direct,
            t.booking_class,
            -- 计算推荐分数
            (
                CASE WHEN user_prefs.prefers_direct_flights AND t.is_direct THEN 20 ELSE 0 END +
                CASE WHEN user_prefs.prefers_business_class AND t.booking_class = 'Business' THEN 15 ELSE 0 END +
                CASE WHEN user_prefs.prefers_economy_class AND t.booking_class = 'Economy' THEN 10 ELSE 0 END +
                CASE WHEN user_prefs.price_sensitive THEN (100 - (t.price / 10)) ELSE 50 END +
                CASE WHEN user_prefs.prefers_morning_departure AND EXTRACT(HOUR FROM t.departure_time) BETWEEN 6 AND 12 THEN 10 ELSE 0 END +
                CASE WHEN user_prefs.prefers_evening_departure AND EXTRACT(HOUR FROM t.departure_time) BETWEEN 18 AND 23 THEN 10 ELSE 0 END
            )::DECIMAL as recommendation_score
        FROM tickets t
        WHERE 
            t.origin = p_origin
            AND t.destination = p_destination
            AND t.available_seats > 0
        ORDER BY recommendation_score DESC, t.price ASC
        LIMIT p_limit;
    END;
    $$ LANGUAGE plpgsql;

    -- 创建性能监控视图
    CREATE VIEW ticket_performance_stats AS
    SELECT 
        origin,
        destination,
        booking_class,
        COUNT(*) as total_tickets,
        AVG(price) as avg_price,
        MIN(price) as min_price,
        MAX(price) as max_price,
        AVG(duration) as avg_duration,
        COUNT(CASE WHEN is_direct THEN 1 END) as direct_flights,
        COUNT(CASE WHEN NOT is_direct THEN 1 END) as connecting_flights
    FROM tickets
    GROUP BY origin, destination, booking_class;

    -- 创建用户活动统计视图
    CREATE VIEW user_activity_stats AS
    SELECT 
        u.id,
        u.email,
        u.created_at,
        COUNT(ak.id) as total_api_keys,
        COUNT(CASE WHEN ak.is_active THEN 1 END) as active_api_keys,
        COALESCE(SUM(ak.total_requests), 0) as total_requests,
        MAX(ak.last_used_at) as last_api_usage
    FROM users u
    LEFT JOIN api_keys ak ON u.id = ak.user_id
    GROUP BY u.id, u.email, u.created_at;

    -- 添加注释
    COMMENT ON TABLE users IS '用户账户信息表';
    COMMENT ON TABLE user_preferences IS '用户旅行偏好设置表';
    COMMENT ON TABLE tickets IS '机票信息表';
    COMMENT ON TABLE api_keys IS 'API密钥管理表';

    COMMENT ON COLUMN users.email IS '用户邮箱地址，用于登录';
    COMMENT ON COLUMN users.hashed_password IS '用户密码哈希值';
    COMMENT ON COLUMN tickets.duration IS '飞行时长，单位：分钟';
    COMMENT ON COLUMN tickets.layover_duration IS '中转等待时长，单位：分钟';
    COMMENT ON COLUMN api_keys.rate_limit IS 'API调用速率限制，单位：次/分钟';

    -- 创建数据清理任务（可选）
    CREATE OR REPLACE FUNCTION cleanup_old_tickets()
    RETURNS INTEGER AS $$
    DECLARE
        deleted_count INTEGER;
    BEGIN
        -- 删除30天前的过期机票数据
        DELETE FROM tickets 
        WHERE departure_time < CURRENT_TIMESTAMP - INTERVAL '30 days';
        
        GET DIAGNOSTICS deleted_count = ROW_COUNT;
        
        RETURN deleted_count;
    END;
    $$ LANGUAGE plpgsql;
    """)

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("""
    -- 删除函数
    DROP FUNCTION IF EXISTS get_recommended_tickets(INTEGER, VARCHAR, VARCHAR, INTEGER);
    DROP FUNCTION IF EXISTS search_tickets(VARCHAR, VARCHAR, DATE, DECIMAL, VARCHAR, BOOLEAN);
    DROP FUNCTION IF EXISTS cleanup_old_tickets();
    DROP FUNCTION IF EXISTS update_updated_at_column();

    -- 删除视图
    DROP VIEW IF EXISTS user_complete_info;
    DROP VIEW IF EXISTS ticket_search_view;
    DROP VIEW IF EXISTS ticket_performance_stats;
    DROP VIEW IF EXISTS user_activity_stats;

    -- 删除触发器
    DROP TRIGGER IF EXISTS update_users_updated_at ON users;
    DROP TRIGGER IF EXISTS update_user_preferences_updated_at ON user_preferences;
    DROP TRIGGER IF EXISTS update_tickets_updated_at ON tickets;
    DROP TRIGGER IF EXISTS update_api_keys_updated_at ON api_keys;

    -- 删除约束
    ALTER TABLE user_preferences DROP CONSTRAINT IF EXISTS unique_user_preference;
    ALTER TABLE tickets DROP CONSTRAINT IF EXISTS check_positive_price;
    ALTER TABLE tickets DROP CONSTRAINT IF EXISTS check_positive_duration;
    ALTER TABLE api_keys DROP CONSTRAINT IF EXISTS check_positive_rate_limit;

    -- 删除索引
    DROP INDEX IF EXISTS idx_tickets_route_time;
    DROP INDEX IF EXISTS idx_tickets_price_class;
    DROP INDEX IF EXISTS idx_user_preferences_boolean_flags;

    DROP INDEX IF EXISTS ix_api_keys_prefix;
    DROP INDEX IF EXISTS ix_api_keys_key_hash;
    DROP INDEX IF EXISTS ix_api_keys_user_id;
    DROP INDEX IF EXISTS ix_api_keys_id;

    DROP INDEX IF EXISTS ix_tickets_booking_class;
    DROP INDEX IF EXISTS ix_tickets_departure_time;
    DROP INDEX IF EXISTS ix_tickets_price;
    DROP INDEX IF EXISTS ix_tickets_airline;
    DROP INDEX IF EXISTS ix_tickets_destination;
    DROP INDEX IF EXISTS ix_tickets_origin;
    DROP INDEX IF EXISTS ix_tickets_id;

    DROP INDEX IF EXISTS ix_user_preferences_user_id;
    DROP INDEX IF EXISTS ix_user_preferences_id;

    DROP INDEX IF EXISTS ix_users_email;
    DROP INDEX IF EXISTS ix_users_id;

    -- 删除表
    DROP TABLE IF EXISTS api_keys;
    DROP TABLE IF EXISTS tickets;
    DROP TABLE IF EXISTS user_preferences;
    DROP TABLE IF EXISTS users;
    """)
    # ### end Alembic commands ###


